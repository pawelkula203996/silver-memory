#include <cstdio>
#include <iostream>
#include <vector>

using namespace std;


class Zwierze
{
protected:
    int8_t masa;
public:
    virtual void daj_glos() = 0;
    void ustaw_mase (int8_t masa)
    {
        this -> masa = masa;
    }

    Zwierze()
    {
        ustaw_mase(0);
        if(masa<0 || masa>1000)
            {
                 std::string wyjatek = "do rze≈∫ni!";
                 throw wyjatek;
             }
    }
};

class Koza : public Zwierze
{
public:
  virtual void daj_glos()
  {
     cout << "meee!" ;
  }
  void ustaw_mase (int8_t masa)
    {
        if (masa<0 || masa>1000) throw -1;
            Zwierze::ustaw_mase(masa);
        cout << endl << masa << endl;
    }
};

class Gnu : public Zwierze
{
public:
  virtual void daj_glos()
  {
    cout << "buuu!" ;
  }
  void ustaw_mase (int8_t masa)
    {
        if (masa<0 || masa>1000) throw -1;
            Zwierze::ustaw_mase(masa);
        cout << endl << masa << endl;
    }

};

class Zebra : public Zwierze
{
public:
  virtual void daj_glos()
  {
    cout << "looo!" ;
  }
  void ustaw_mase (int8_t masa)
    {
        if (masa<0 || masa>1000) throw -1;
            Zwierze::ustaw_mase(masa);
        cout << endl << masa << endl;
    }
};

class Forfiter : public Zwierze
{
public:
  virtual void daj_glos()
  {
    cout << "lol!" ;
  }
  void ustaw_mase (int8_t masa)
    {
        if (masa<0 || masa>1000) throw -1;
            Zwierze::ustaw_mase(masa);
        cout << endl << masa << endl;
    }
};

class Zoo
{
protected:
    vector <Zwierze*> v;

public:
    Zoo(){
    v.push_back(new Koza());
    v.push_back(new Gnu());
    v.push_back(new Zebra());
    v.push_back(new Forfiter());
}
void glosy() {
    for (int i=0; i<v.size(); ++i)
        v.at(i) -> daj_glos();
}
};


int main()
{

    Zwierze *z;
    z = new Koza;
    z->daj_glos();
    z->ustaw_mase(70);
    delete z;
    z = new Gnu;
    z->daj_glos();
    z->ustaw_mase(50);
    delete z;
    z = new Gnu;
    z->daj_glos();
    z->ustaw_mase(60);
    delete z;
    z = new Zebra;
    z->daj_glos();
    z->ustaw_mase(100);
    delete z;
    z = new Forfiter;
    z->daj_glos();
    z->ustaw_mase(40);
    delete z;
    z = new Koza;
    z->daj_glos();
    z->ustaw_mase(1100);
    delete z;


    //Zoo zoo;
    //zoo.glosy();

    return 0;
}
